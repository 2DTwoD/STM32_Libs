<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\STM32_Libs.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\STM32_Libs.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Tue May 14 16:31:22 2024
<BR><P>
<H3>Maximum Stack Usage =        272 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[82]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">SystemInit</a> from system_stm32f10x.o(.text.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from main.o(.text.TIM2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[56]">_GLOBAL__sub_I_main.cpp</a> from main.o(.text._GLOBAL__sub_I_main.cpp) referenced from main.o(.init_array)
 <LI><a href="#[3d]">ledTask(void*)</a> from led_task.o(.text._Z7ledTaskPv) referenced 2 times from main.o(.text.main)
 <LI><a href="#[3e]">pidTask(void*)</a> from pidtask.o(.text._Z7pidTaskPv) referenced 2 times from main.o(.text.main)
 <LI><a href="#[3f]">testTask(void*)</a> from test_task.o(.text._Z8testTaskPv) referenced 2 times from main.o(.text.main)
 <LI><a href="#[44]">CommonTimer::started()</a> from common_timer.o(.text._ZN11CommonTimer7startedEv) referenced from common_timer.o(.rodata._ZTV11CommonTimer)
 <LI><a href="#[44]">CommonTimer::started()</a> from common_timer.o(.text._ZN11CommonTimer7startedEv) referenced from simple_input.o(.rodata._ZTV18SimpleInputDelayed)
 <LI><a href="#[43]">CommonTimer::update1ms()</a> from common_timer.o(.text._ZN11CommonTimer9update1msEv) referenced from common_timer.o(.rodata._ZTV11CommonTimer)
 <LI><a href="#[43]">CommonTimer::update1ms()</a> from common_timer.o(.text._ZN11CommonTimer9update1msEv) referenced from switch_delay.o(.rodata._ZTV11SwitchDelay)
 <LI><a href="#[46]">SimpleInput::isActive()</a> from simple_input.o(.text._ZN11SimpleInput8isActiveEv) referenced from simple_input.o(.rodata._ZTV11SimpleInput)
 <LI><a href="#[47]">SwitchDelay::started()</a> from switch_delay.o(.text._ZN11SwitchDelay7startedEv) referenced from switch_delay.o(.rodata._ZTV11SwitchDelay)
 <LI><a href="#[48]">ThreePosReg::update1ms()</a> from three_pos.o(.text._ZN11ThreePosReg9update1msEv) referenced from three_pos.o(.rodata._ZTV11ThreePosReg)
 <LI><a href="#[39]">ThreePosReg::~ThreePosReg()</a> from three_pos.o(.text._ZN11ThreePosRegD2Ev) referenced 2 times from main.o(.text.__cxx_global_var_init.13)
 <LI><a href="#[49]">ProgrammCoil::isActive()</a> from coil.o(.text._ZN12ProgrammCoil8isActiveEv) referenced from coil.o(.rodata._ZTV12ProgrammCoil)
 <LI><a href="#[4a]">ProgrammCoil::setValue(bool)</a> from coil.o(.text._ZN12ProgrammCoil8setValueEb) referenced from coil.o(.rodata._ZTV12ProgrammCoil)
 <LI><a href="#[3b]">AnalogMonitor::~AnalogMonitor()</a> from analog_monitor.o(.text._ZN13AnalogMonitorD2Ev) referenced 2 times from main.o(.text.__cxx_global_var_init.6)
 <LI><a href="#[4c]">SimpleInputDelayed::isActive()</a> from simple_input.o(.text._ZN18SimpleInputDelayed8isActiveEv) referenced from simple_input.o(.rodata._ZTV18SimpleInputDelayed)
 <LI><a href="#[4d]">SimpleInputDelayed::update1ms()</a> from simple_input.o(.text._ZN18SimpleInputDelayed9update1msEv) referenced from simple_input.o(.rodata._ZTV18SimpleInputDelayed)
 <LI><a href="#[3a]">Mux&lang;float&rang;::~Mux__sub_object()</a> from main.o(.text._ZN3MuxIfED2Ev) referenced 2 times from main.o(.text.__cxx_global_var_init.14)
 <LI><a href="#[4f]">Coil::isActive()</a> from coil.o(.text._ZN4Coil8isActiveEv) referenced from coil.o(.rodata._ZTV4Coil)
 <LI><a href="#[50]">Coil::setValue(bool)</a> from coil.o(.text._ZN4Coil8setValueEb) referenced from coil.o(.rodata._ZTV4Coil)
 <LI><a href="#[51]">Ramp::update1ms()</a> from ramp.o(.text._ZN4Ramp9update1msEv) referenced from ramp.o(.rodata._ZTV4Ramp)
 <LI><a href="#[52]">MovAvg::updateSomewhere()</a> from moving_avg.o(.text._ZN6MovAvg15updateSomewhereEv) referenced from moving_avg.o(.rodata._ZTV6MovAvg)
 <LI><a href="#[37]">MovAvg::~MovAvg()</a> from moving_avg.o(.text._ZN6MovAvgD2Ev) referenced 2 times from main.o(.text.__cxx_global_var_init.11)
 <LI><a href="#[53]">PIDreg::updateSomewhere()</a> from pid.o(.text._ZN6PIDreg15updateSomewhereEv) referenced from pid.o(.rodata._ZTV6PIDreg)
 <LI><a href="#[4b]">Monitor::update1ms()</a> from monitor.o(.text._ZN7Monitor9update1msEv) referenced from analog_monitor.o(.rodata._ZTV13AnalogMonitor)
 <LI><a href="#[4b]">Monitor::update1ms()</a> from monitor.o(.text._ZN7Monitor9update1msEv) referenced from monitor.o(.rodata._ZTV7Monitor)
 <LI><a href="#[54]">AnalogOut::update1ms()</a> from analog_out.o(.text._ZN9AnalogOut9update1msEv) referenced from analog_out.o(.rodata._ZTV9AnalogOut)
 <LI><a href="#[3c]">AnalogOut::~AnalogOut()</a> from analog_out.o(.text._ZN9AnalogOutD2Ev) referenced 2 times from main.o(.text.__cxx_global_var_init.7)
 <LI><a href="#[55]">TwoPosTim::update1ms()</a> from two_pos.o(.text._ZN9TwoPosTim9update1msEv) referenced from two_pos.o(.rodata._ZTV9TwoPosTim)
 <LI><a href="#[38]">TwoPosTim::~TwoPosTim()</a> from two_pos.o(.text._ZN9TwoPosTimD2Ev) referenced 2 times from main.o(.text.__cxx_global_var_init.12)
 <LI><a href="#[4e]">non-virtual thunk to SimpleInputDelayed::update1ms()</a> from simple_input.o(.text._ZThn12_N18SimpleInputDelayed9update1msEv) referenced from simple_input.o(.rodata._ZTV18SimpleInputDelayed)
 <LI><a href="#[45]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from common_timer.o(.rodata._ZTV11IUpdated1ms)
 <LI><a href="#[45]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from pid.o(.rodata._ZTV17IUpdatedSomewhere)
 <LI><a href="#[45]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from main.o(.rodata._ZTV7ISwitch)
 <LI><a href="#[36]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[57]">abort</a> from abort.o(.text) referenced from cxa_default_handlers.cpp.o(.data.__cxa_terminate_handler)
 <LI><a href="#[41]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[40]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[42]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced 2 times from timers.o(.text.xTimerCreateTimerTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[16f]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[170]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[5d]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[171]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[66]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[172]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[5e]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[173]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[174]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[175]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[176]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[177]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[178]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[60]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[179]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[17a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[17b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[17c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[17d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[17e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[17f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[180]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[181]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[182]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[183]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[184]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[185]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[186]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[187]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[6b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[61]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[188]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[189]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[18a]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[18b]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[18c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[18d]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[18e]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[5b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[18f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[63]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[65]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[190]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[67]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[191]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[83]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[6a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[192]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[6c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6e]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.14
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.13
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.12
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.11
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[70]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[193]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[194]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[195]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovAvg::MovAvg(unsigned char)
</UL>

<P><STRONG><a name="[196]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[198]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[75]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[78]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[57]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_default_handlers.cpp.o(.data.__cxa_terminate_handler)
</UL>
<P><STRONG><a name="[6f]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[76]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[7a]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[19e]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[7c]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[5f]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[7e]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1a2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[79]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[1a3]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1a4]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[7b]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[1a8]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[80]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[7f]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[7d]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[84]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[85]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[86]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, port.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, system_stm32f10x.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
</UL>

<P><STRONG><a name="[35]"></a>SystemInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>commonInit()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, init.o(.text._Z10commonInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = commonInit() &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>getPosition(unsigned int)</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, common.o(.text._Z11getPositionj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getPosition(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void setBitsInRegister&lang;unsigned short volatile&rang;(unsigned short volatile*, unsigned int, unsigned int)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[b8]"></a>void setRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int)</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, init.o(.text._Z11setRegisterIVjEvPT_jj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = void setRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInput::SimpleInput(GPIO_TypeDef*, unsigned char)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rccInit()
</UL>

<P><STRONG><a name="[9c]"></a>void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, init.o(.text._Z17setBitsInRegisterIVjEvPT_jj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPosition(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmInit()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[9e]"></a>void setBitsInRegister&lang;unsigned short volatile&rang;(unsigned short volatile*, unsigned int, unsigned int)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, init.o(.text._Z17setBitsInRegisterIVtEvPT_jj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = void setBitsInRegister&lang;unsigned short volatile&rang;(unsigned short volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPosition(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmInit()
</UL>

<P><STRONG><a name="[9f]"></a>float abs&lang;float&rang;(float)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pid.o(.text._Z3absIfET_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = float abs&lang;float&rang;(float) &rArr; __aeabi_fcmpge
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::updateSomewhere()
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::update1ms()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::setPulseGist(float)
</UL>

<P><STRONG><a name="[a1]"></a>float max&lang;float&rang;(float, float)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, pid.o(.text._Z3maxIfET_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = float max&lang;float&rang;(float, float) &rArr; __aeabi_fcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::setValueMax(float)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::setPulseGist(float)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::setLimMax(float)
</UL>

<P><STRONG><a name="[f0]"></a>unsigned char max&lang;unsigned char&rang;(unsigned char, unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, main.o(.text._Z3maxIhET_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = unsigned char max&lang;unsigned char&rang;(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mux&lang;float&rang;::Mux__sub_object(unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovAvg::MovAvg(unsigned char)
</UL>

<P><STRONG><a name="[ee]"></a>unsigned char min&lang;unsigned char&rang;(unsigned char, unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, main.o(.text._Z3minIhET_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = unsigned char min&lang;unsigned char&rang;(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mux&lang;float&rang;::set(unsigned char)
</UL>

<P><STRONG><a name="[ec]"></a>int min&lang;int&rang;(int, int)</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, main.o(.text._Z3minIiET_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = int min&lang;int&rang;(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mux&lang;float&rang;::reg(int, ...)
</UL>

<P><STRONG><a name="[a3]"></a>float limit&lang;float&rang;(float, float, float)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, test_task.o(.text._Z5limitIfET_S0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = float limit&lang;float&rang;(float, float, float) &rArr; void toggle&lang;float&rang;(float*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void toggle&lang;float&rang;(float*, float*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::updateSomewhere()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::set(float)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, unsigned short&rang;::set(float)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::update1ms()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::set(float)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, short&rang;::set(float)
</UL>

<P><STRONG><a name="[a5]"></a>unsigned short limit&lang;unsigned short&rang;(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, analog_monitor.o(.text._Z5limitItET_S0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = unsigned short limit&lang;unsigned short&rang;(unsigned short, unsigned short, unsigned short) &rArr; void toggle&lang;unsigned short&rang;(unsigned short*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void toggle&lang;unsigned short&rang;(unsigned short*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;unsigned short, float&rang;::set(unsigned short)
</UL>

<P><STRONG><a name="[a4]"></a>void toggle&lang;float&rang;(float*, float*)</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, test_task.o(.text._Z6toggleIfEvPT_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = void toggle&lang;float&rang;(float*, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float limit&lang;float&rang;(float, float, float)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::Ramp(unsigned int, float, float, float, float)
</UL>

<P><STRONG><a name="[a6]"></a>void toggle&lang;unsigned short&rang;(unsigned short*, unsigned short*)</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, analog_monitor.o(.text._Z6toggleItEvPT_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = void toggle&lang;unsigned short&rang;(unsigned short*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned short limit&lang;unsigned short&rang;(unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[a7]"></a>adcInit()</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, init.o(.text._Z7adcInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = adcInit() &rArr; CommonTimer::prepareAndStart() &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::notFinished()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::prepareAndStart()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>ledTask(void*)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, led_task.o(.text._Z7ledTaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ledTask(void*) &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgrammCoil::toggle()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::finishedImpulse()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::operator=(bool)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::getOut2()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[3e]"></a>pidTask(void*)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, pidtask.o(.text._Z7pidTaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pidTask(void*) &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::getT()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::operator=(float)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::setAuto(bool)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::setTd(float)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::setTi(float)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::setKp(float)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::get()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[b6]"></a>pwmInit()</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, init.o(.text._Z7pwmInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pwmInit() &rArr; void setBitsInRegister&lang;unsigned short volatile&rang;(unsigned short volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void setBitsInRegister&lang;unsigned short volatile&rang;(unsigned short volatile*, unsigned int, unsigned int)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>rccInit()</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, init.o(.text._Z7rccInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rccInit() &rArr; void setRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void setRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>float getRange&lang;float&rang;(float const*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ramp.o(.text._Z8getRangeIfET_PKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = float getRange&lang;float&rang;(float const*) &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::update1ms()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::getOutRange()
</UL>

<P><STRONG><a name="[3f]"></a>testTask(void*)</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, test_task.o(.text._Z8testTaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = testTask(void*) &rArr; AnalogMonitor::operator=(unsigned short) &rArr; AnalogMonitor::set(unsigned short) &rArr; Scale&lang;unsigned short, float&rang;::operator=(unsigned short) &rArr; Scale&lang;unsigned short, float&rang;::set(unsigned short) &rArr; Scale&lang;unsigned short, float&rang;::update() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoPosTim::operator=(float)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOut::operator=(float)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::operator=(float)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, short&rang;::get()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, short&rang;::operator=(float)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovAvg::get()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovAvg::operator=(float)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::get()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogMonitor::operator=(unsigned short)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[c4]"></a>tickInit()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, init.o(.text._Z8tickInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tickInit() &rArr; __NVIC_SetPriority(IRQn, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn, unsigned int)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a9]"></a>GPIOcommon::GPIOcommon(GPIO_TypeDef*, unsigned char)</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, gpio_common.o(.text._ZN10GPIOcommonC2EP12GPIO_TypeDefh), UNUSED)

<P><STRONG><a name="[d5]"></a>GPIOcommon::GPIOcommon__sub_object(GPIO_TypeDef*, unsigned char)</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, gpio_common.o(.text._ZN10GPIOcommonC2EP12GPIO_TypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIOcommon::GPIOcommon__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInput::SimpleInput(GPIO_TypeDef*, unsigned char)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[cf]"></a>CommonTimer::notStarted()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, common_timer.o(.text._ZN11CommonTimer10notStartedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CommonTimer::notStarted()
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::isFree()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::halfImpulseCycleEnded()
</UL>

<P><STRONG><a name="[a9]"></a>CommonTimer::notFinished()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, common_timer.o(.text._ZN11CommonTimer11notFinishedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CommonTimer::notFinished()
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::inWork()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit()
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::update1ms()
</UL>

<P><STRONG><a name="[ac]"></a>CommonTimer::finishedImpulse()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, common_timer.o(.text._ZN11CommonTimer15finishedImpulseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CommonTimer::finishedImpulse() &rArr; CommonTimer::finished()
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::finished()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask(void*)
</UL>

<P><STRONG><a name="[a8]"></a>CommonTimer::prepareAndStart()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, common_timer.o(.text._ZN11CommonTimer15prepareAndStartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CommonTimer::prepareAndStart() &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::stop()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::start()
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit()
</UL>

<P><STRONG><a name="[c8]"></a>CommonTimer::stop()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, common_timer.o(.text._ZN11CommonTimer4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::reset()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::pause()
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::setStart(bool)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::prepareAndStart()
</UL>

<P><STRONG><a name="[ca]"></a>CommonTimer::pause()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, common_timer.o(.text._ZN11CommonTimer5pauseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CommonTimer::pause()
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::stop()
</UL>

<P><STRONG><a name="[cb]"></a>CommonTimer::reset()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, common_timer.o(.text._ZN11CommonTimer5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CommonTimer::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::stop()
</UL>

<P><STRONG><a name="[c9]"></a>CommonTimer::start()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, common_timer.o(.text._ZN11CommonTimer5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CommonTimer::start()
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::finish()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::setStart(bool)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::prepareAndStart()
</UL>

<P><STRONG><a name="[cc]"></a>CommonTimer::finish()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, common_timer.o(.text._ZN11CommonTimer6finishEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CommonTimer::finish() &rArr; CommonTimer::start()
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::start()
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::update1ms()
</UL>

<P><STRONG><a name="[cd]"></a>CommonTimer::inWork()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, common_timer.o(.text._ZN11CommonTimer6inWorkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CommonTimer::inWork() &rArr; CommonTimer::notFinished()
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::notFinished()
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::update1ms()
</UL>

<P><STRONG><a name="[ce]"></a>CommonTimer::isFree()</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, common_timer.o(.text._ZN11CommonTimer6isFreeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CommonTimer::isFree() &rArr; CommonTimer::notStarted()
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::notStarted()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::finished()
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::update1ms()
</UL>

<P><STRONG><a name="[44]"></a>CommonTimer::started()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, common_timer.o(.text._ZN11CommonTimer7startedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CommonTimer::started()
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchDelay::started()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> common_timer.o(.rodata._ZTV11CommonTimer)
<LI> simple_input.o(.rodata._ZTV18SimpleInputDelayed)
</UL>
<P><STRONG><a name="[c7]"></a>CommonTimer::finished()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, common_timer.o(.text._ZN11CommonTimer8finishedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CommonTimer::finished()
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::isFree()
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::isActive()
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::update1ms()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::finishedImpulse()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoPosTim::update1ms()
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::update1ms()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::halfImpulseCycleEnded()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::impulseCycleEnded()
</UL>

<P><STRONG><a name="[d0]"></a>CommonTimer::setStart(bool)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, common_timer.o(.text._ZN11CommonTimer8setStartEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CommonTimer::setStart(bool) &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::stop()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::start()
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::operator=(bool)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::update1ms()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoPosTim::update1ms()
</UL>

<P><STRONG><a name="[111]"></a>CommonTimer::setPeriod(unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, common_timer.o(.text._ZN11CommonTimer9setPeriodEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CommonTimer::setPeriod(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::setTresDelay(TRES_TYPE, unsigned short)
</UL>

<P><STRONG><a name="[43]"></a>CommonTimer::update1ms()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, common_timer.o(.text._ZN11CommonTimer9update1msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CommonTimer::update1ms() &rArr; CommonTimer::finished()
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::finished()
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::update1ms()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> common_timer.o(.rodata._ZTV11CommonTimer)
<LI> switch_delay.o(.rodata._ZTV11SwitchDelay)
</UL>
<P><STRONG><a name="[d1]"></a>CommonTimer::CommonTimer(unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, common_timer.o(.text._ZN11CommonTimerC2Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CommonTimer::CommonTimer(unsigned short) &rArr; IUpdated1ms::IUpdated1ms__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IUpdated1ms::IUpdated1ms__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::ThreePosReg(float, float, float, unsigned short, unsigned short, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoPosTim::TwoPosTim(float, unsigned short, unsigned short, bool)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::Monitor(float, float)
</UL>

<P><STRONG><a name="[d8]"></a>CommonTimer::CommonTimer__sub_object(unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, common_timer.o(.text._ZN11CommonTimerC2Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CommonTimer::CommonTimer__sub_object(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchDelay::SwitchDelay(ISwitch*, unsigned short)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[d3]"></a>CommonTimer::operator=(bool)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, common_timer.o(.text._ZN11CommonTimeraSEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CommonTimer::operator=(bool) &rArr; CommonTimer::setStart(bool) &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::setStart(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::update1ms()
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::update1ms()
</UL>

<P><STRONG><a name="[d2]"></a>IUpdated1ms::IUpdated1ms__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, common_timer.o(.text._ZN11IUpdated1msC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IUpdated1ms::IUpdated1ms__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::ThreePosReg(float, float, float, unsigned short, unsigned short, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoPosTim::TwoPosTim(float, unsigned short, unsigned short, bool)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::CommonTimer(unsigned short)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::Monitor(float, float)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::Ramp(unsigned int, float, float, float, float)
</UL>

<P><STRONG><a name="[46]"></a>SimpleInput::isActive()</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, simple_input.o(.text._ZN11SimpleInput8isActiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SimpleInput::isActive()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simple_input.o(.rodata._ZTV11SimpleInput)
</UL>
<P><STRONG><a name="[d4]"></a>SimpleInput::SimpleInput(GPIO_TypeDef*, unsigned char)</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, simple_input.o(.text._ZN11SimpleInputC2EP12GPIO_TypeDefh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOcommon::GPIOcommon__sub_object(GPIO_TypeDef*, unsigned char)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void setRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISwitch::ISwitch__sub_object()
</UL>

<P><STRONG><a name="[ea]"></a>SimpleInput::SimpleInput__sub_object(GPIO_TypeDef*, unsigned char)</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, simple_input.o(.text._ZN11SimpleInputC2EP12GPIO_TypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SimpleInput::SimpleInput__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[47]"></a>SwitchDelay::started()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, switch_delay.o(.text._ZN11SwitchDelay7startedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SwitchDelay::started() &rArr; CommonTimer::started()
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::started()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> switch_delay.o(.rodata._ZTV11SwitchDelay)
</UL>
<P><STRONG><a name="[d7]"></a>SwitchDelay::SwitchDelay(ISwitch*, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, switch_delay.o(.text._ZN11SwitchDelayC2EP7ISwitcht))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SwitchDelay::SwitchDelay(ISwitch*, unsigned short) &rArr; CommonTimer::CommonTimer__sub_object(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::CommonTimer__sub_object(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
</UL>

<P><STRONG><a name="[1aa]"></a>SwitchDelay::SwitchDelay__sub_object(ISwitch*, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, switch_delay.o(.text._ZN11SwitchDelayC2EP7ISwitcht), UNUSED)

<P><STRONG><a name="[d9]"></a>ThreePosReg::setPulseGist(float)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, three_pos.o(.text._ZN11ThreePosReg12setPulseGistEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ThreePosReg::setPulseGist(float) &rArr; float max&lang;float&rang;(float, float) &rArr; __aeabi_fcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float max&lang;float&rang;(float, float)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float abs&lang;float&rang;(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::ThreePosReg(float, float, float, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[da]"></a>ThreePosReg::impulseCycleEnded()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, three_pos.o(.text._ZN11ThreePosReg17impulseCycleEndedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ThreePosReg::impulseCycleEnded() &rArr; CommonTimer::finished()
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::finished()
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::update1ms()
</UL>

<P><STRONG><a name="[db]"></a>ThreePosReg::halfImpulseCycleEnded()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, three_pos.o(.text._ZN11ThreePosReg21halfImpulseCycleEndedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ThreePosReg::halfImpulseCycleEnded() &rArr; CommonTimer::notStarted()
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::notStarted()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::finished()
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::update1ms()
</UL>

<P><STRONG><a name="[aa]"></a>ThreePosReg::getOut2()</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, three_pos.o(.text._ZN11ThreePosReg7getOut2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ThreePosReg::getOut2()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask(void*)
</UL>

<P><STRONG><a name="[48]"></a>ThreePosReg::update1ms()</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, three_pos.o(.text._ZN11ThreePosReg9update1msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ThreePosReg::update1ms() &rArr; CommonTimer::operator=(bool) &rArr; CommonTimer::setStart(bool) &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float abs&lang;float&rang;(float)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::isFree()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::inWork()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::operator=(bool)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::finish()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::finished()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::notFinished()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::halfImpulseCycleEnded()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::impulseCycleEnded()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> three_pos.o(.rodata._ZTV11ThreePosReg)
</UL>
<P><STRONG><a name="[dd]"></a>ThreePosReg::ThreePosReg(float, float, float, unsigned short, unsigned short, bool)</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, three_pos.o(.text._ZN11ThreePosRegC2Efffttb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ThreePosReg::ThreePosReg(float, float, float, unsigned short, unsigned short, bool) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IUpdated1ms::IUpdated1ms__sub_object()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::CommonTimer(unsigned short)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::setPulseGist(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.13
</UL>

<P><STRONG><a name="[1ab]"></a>ThreePosReg::ThreePosReg__sub_object(float, float, float, unsigned short, unsigned short, bool)</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, three_pos.o(.text._ZN11ThreePosRegC2Efffttb), UNUSED)

<P><STRONG><a name="[39]"></a>ThreePosReg::~ThreePosReg()</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, three_pos.o(.text._ZN11ThreePosRegD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ThreePosReg::~ThreePosReg() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.__cxx_global_var_init.13)
</UL>
<P><STRONG><a name="[1ac]"></a>ThreePosReg::~ThreePosReg__sub_object()</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, three_pos.o(.text._ZN11ThreePosRegD2Ev), UNUSED)

<P><STRONG><a name="[ad]"></a>ProgrammCoil::toggle()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, coil.o(.text._ZN12ProgrammCoil6toggleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProgrammCoil::toggle()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask(void*)
</UL>

<P><STRONG><a name="[49]"></a>ProgrammCoil::isActive()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, coil.o(.text._ZN12ProgrammCoil8isActiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ProgrammCoil::isActive()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coil.o(.rodata._ZTV12ProgrammCoil)
</UL>
<P><STRONG><a name="[4a]"></a>ProgrammCoil::setValue(bool)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, coil.o(.text._ZN12ProgrammCoil8setValueEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ProgrammCoil::setValue(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coil.o(.rodata._ZTV12ProgrammCoil)
</UL>
<P><STRONG><a name="[e0]"></a>ProgrammCoil::ProgrammCoil__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(.text._ZN12ProgrammCoilC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ProgrammCoil::ProgrammCoil__sub_object() &rArr; ISwitch::ISwitch__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISwitch::ISwitch__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
</UL>

<P><STRONG><a name="[124]"></a>ProgrammCoil::operator=(bool)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, coil.o(.text._ZN12ProgrammCoilaSEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ProgrammCoil::operator=(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>TwoPosCommon::set(float)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, two_pos.o(.text._ZN12TwoPosCommon3setEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TwoPosCommon::set(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoPosTim::operator=(float)
</UL>

<P><STRONG><a name="[1ad]"></a>TwoPosCommon::TwoPosCommon(float, bool)</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, two_pos.o(.text._ZN12TwoPosCommonC2Efb), UNUSED)

<P><STRONG><a name="[119]"></a>TwoPosCommon::TwoPosCommon__sub_object(float, bool)</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, two_pos.o(.text._ZN12TwoPosCommonC2Efb))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TwoPosCommon::TwoPosCommon__sub_object(float, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoPosTim::TwoPosTim(float, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[e1]"></a>AnalogMonitor::set(unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, analog_monitor.o(.text._ZN13AnalogMonitor3setEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AnalogMonitor::set(unsigned short) &rArr; Scale&lang;unsigned short, float&rang;::operator=(unsigned short) &rArr; Scale&lang;unsigned short, float&rang;::set(unsigned short) &rArr; Scale&lang;unsigned short, float&rang;::update() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::set(float)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;unsigned short, float&rang;::get()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;unsigned short, float&rang;::operator=(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogMonitor::operator=(unsigned short)
</UL>

<P><STRONG><a name="[e5]"></a>AnalogMonitor::AnalogMonitor(unsigned char, float, float)</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, analog_monitor.o(.text._ZN13AnalogMonitorC2Ehff))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AnalogMonitor::AnalogMonitor(unsigned char, float, float) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;unsigned short, float&rang;::Scale__sub_object(unsigned short, unsigned short, float, float)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::Monitor__sub_object(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
</UL>

<P><STRONG><a name="[1ae]"></a>AnalogMonitor::AnalogMonitor__sub_object(unsigned char, float, float)</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, analog_monitor.o(.text._ZN13AnalogMonitorC2Ehff), UNUSED)

<P><STRONG><a name="[3b]"></a>AnalogMonitor::~AnalogMonitor()</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, analog_monitor.o(.text._ZN13AnalogMonitorD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AnalogMonitor::~AnalogMonitor() &rArr; Monitor::~Monitor__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::~Monitor__sub_object()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.__cxx_global_var_init.6)
</UL>
<P><STRONG><a name="[1af]"></a>AnalogMonitor::~AnalogMonitor__sub_object()</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, analog_monitor.o(.text._ZN13AnalogMonitorD2Ev), UNUSED)

<P><STRONG><a name="[bb]"></a>AnalogMonitor::operator=(unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, analog_monitor.o(.text._ZN13AnalogMonitoraSEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AnalogMonitor::operator=(unsigned short) &rArr; AnalogMonitor::set(unsigned short) &rArr; Scale&lang;unsigned short, float&rang;::operator=(unsigned short) &rArr; Scale&lang;unsigned short, float&rang;::set(unsigned short) &rArr; Scale&lang;unsigned short, float&rang;::update() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogMonitor::set(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTask(void*)
</UL>

<P><STRONG><a name="[108]"></a>IUpdatedSomewhere::IUpdatedSomewhere__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, pid.o(.text._ZN17IUpdatedSomewhereC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IUpdatedSomewhere::IUpdatedSomewhere__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovAvg::MovAvg(unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::PIDreg(unsigned short, float, float, float, float, float, float, float, bool)
</UL>

<P><STRONG><a name="[4c]"></a>SimpleInputDelayed::isActive()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, simple_input.o(.text._ZN18SimpleInputDelayed8isActiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SimpleInputDelayed::isActive() &rArr; CommonTimer::finished()
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::finished()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simple_input.o(.rodata._ZTV18SimpleInputDelayed)
</UL>
<P><STRONG><a name="[4d]"></a>SimpleInputDelayed::update1ms()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, simple_input.o(.text._ZN18SimpleInputDelayed9update1msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SimpleInputDelayed::update1ms() &rArr; CommonTimer::setStart(bool) &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::update1ms()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::setStart(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to SimpleInputDelayed::update1ms()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simple_input.o(.rodata._ZTV18SimpleInputDelayed)
</UL>
<P><STRONG><a name="[e9]"></a>SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, simple_input.o(.text._ZN18SimpleInputDelayedC2EP12GPIO_TypeDefht))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short) &rArr; SimpleInput::SimpleInput__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::CommonTimer__sub_object(unsigned short)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInput::SimpleInput__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
</UL>

<P><STRONG><a name="[1b0]"></a>SimpleInputDelayed::SimpleInputDelayed__sub_object(GPIO_TypeDef*, unsigned char, unsigned short)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, simple_input.o(.text._ZN18SimpleInputDelayedC2EP12GPIO_TypeDefht), UNUSED)

<P><STRONG><a name="[123]"></a>Mux&lang;float&rang;::get()</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, main.o(.text._ZN3MuxIfE3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Mux&lang;float&rang;::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>Mux&lang;float&rang;::reg(float*, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(.text._ZN3MuxIfE3regEPfh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mux&lang;float&rang;::reg(float*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>Mux&lang;float&rang;::reg(int, ...)</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, main.o(.text._ZN3MuxIfE3regEiz))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Mux&lang;float&rang;::reg(int, ...) &rArr; int min&lang;int&rang;(int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int min&lang;int&rang;(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>Mux&lang;float&rang;::set(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, main.o(.text._ZN3MuxIfE3setEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Mux&lang;float&rang;::set(unsigned char) &rArr; unsigned char min&lang;unsigned char&rang;(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char min&lang;unsigned char&rang;(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>Mux&lang;float&rang;::Mux__sub_object(unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, main.o(.text._ZN3MuxIfEC2Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Mux&lang;float&rang;::Mux__sub_object(unsigned char) &rArr; operator new[](unsigned int) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw_bad_array_new_length
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char max&lang;unsigned char&rang;(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.14
</UL>

<P><STRONG><a name="[3a]"></a>Mux&lang;float&rang;::~Mux__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, main.o(.text._ZN3MuxIfED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Mux&lang;float&rang;::~Mux__sub_object() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.__cxx_global_var_init.14)
</UL>
<P><STRONG><a name="[4f]"></a>Coil::isActive()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, coil.o(.text._ZN4Coil8isActiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Coil::isActive()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coil.o(.rodata._ZTV4Coil)
</UL>
<P><STRONG><a name="[50]"></a>Coil::setValue(bool)</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, coil.o(.text._ZN4Coil8setValueEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Coil::setValue(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coil.o(.rodata._ZTV4Coil)
</UL>
<P><STRONG><a name="[f3]"></a>Coil::Coil(GPIO_TypeDef*, unsigned char)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, coil.o(.text._ZN4CoilC2EP12GPIO_TypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Coil::Coil(GPIO_TypeDef*, unsigned char) &rArr; void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOcommon::GPIOcommon__sub_object(GPIO_TypeDef*, unsigned char)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgrammCoil::ProgrammCoil__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[1b1]"></a>Coil::Coil__sub_object(GPIO_TypeDef*, unsigned char)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, coil.o(.text._ZN4CoilC2EP12GPIO_TypeDefh), UNUSED)

<P><STRONG><a name="[ab]"></a>Coil::operator=(bool)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, coil.o(.text._ZN4CoilaSEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Coil::operator=(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask(void*)
</UL>

<P><STRONG><a name="[f4]"></a>Ramp::getOutRange()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ramp.o(.text._ZN4Ramp11getOutRangeEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float getRange&lang;float&rang;(float const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::setFullRangeTime(unsigned int)
</UL>

<P><STRONG><a name="[f5]"></a>Ramp::setFullRangeTime(unsigned int)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ramp.o(.text._ZN4Ramp16setFullRangeTimeEj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::getOutRange()
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::Ramp(unsigned int, float, float, float, float)
</UL>

<P><STRONG><a name="[114]"></a>Ramp::get()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, ramp.o(.text._ZN4Ramp3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Ramp::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOut::update1ms()
</UL>

<P><STRONG><a name="[f8]"></a>Ramp::set(float)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ramp.o(.text._ZN4Ramp3setEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Ramp::set(float) &rArr; float limit&lang;float&rang;(float, float, float) &rArr; void toggle&lang;float&rang;(float*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float limit&lang;float&rang;(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOut::operator=(float)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::operator=(float)
</UL>

<P><STRONG><a name="[f9]"></a>Ramp::setLimMax(float)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ramp.o(.text._ZN4Ramp9setLimMaxEf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float max&lang;float&rang;(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::Ramp(unsigned int, float, float, float, float)
</UL>

<P><STRONG><a name="[51]"></a>Ramp::update1ms()</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ramp.o(.text._ZN4Ramp9update1msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Ramp::update1ms() &rArr; float limit&lang;float&rang;(float, float, float) &rArr; void toggle&lang;float&rang;(float*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float limit&lang;float&rang;(float, float, float)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOut::update1ms()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ramp.o(.rodata._ZTV4Ramp)
</UL>
<P><STRONG><a name="[fc]"></a>Ramp::Ramp(unsigned int)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, ramp.o(.text._ZN4RampC2Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Ramp::Ramp(unsigned int) &rArr; Ramp::Ramp__sub_object(unsigned int, float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::Ramp__sub_object(unsigned int, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.10
</UL>

<P><STRONG><a name="[1b2]"></a>Ramp::Ramp__sub_object(unsigned int)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, ramp.o(.text._ZN4RampC2Ej), UNUSED)

<P><STRONG><a name="[fe]"></a>Ramp::Ramp(unsigned int, float, float, float, float)</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ramp.o(.text._ZN4RampC2Ejffff), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IUpdated1ms::IUpdated1ms__sub_object()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void toggle&lang;float&rang;(float*, float*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::setFullRangeTime(unsigned int)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::setLimMax(float)
</UL>

<P><STRONG><a name="[fd]"></a>Ramp::Ramp__sub_object(unsigned int, float, float, float, float)</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ramp.o(.text._ZN4RampC2Ejffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ramp::Ramp__sub_object(unsigned int, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::Ramp(unsigned int)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOut::AnalogOut(unsigned short, unsigned int, float, float, float, float)
</UL>

<P><STRONG><a name="[c1]"></a>Ramp::operator=(float)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, ramp.o(.text._ZN4RampaSEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Ramp::operator=(float) &rArr; Ramp::set(float) &rArr; float limit&lang;float&rang;(float, float, float) &rArr; void toggle&lang;float&rang;(float*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::set(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTask(void*)
</UL>

<P><STRONG><a name="[bf]"></a>Scale&lang;float, short&rang;::get()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, test_task.o(.text._ZN5ScaleIfsE3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Scale&lang;float, short&rang;::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTask(void*)
</UL>

<P><STRONG><a name="[ff]"></a>Scale&lang;float, short&rang;::set(float)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, test_task.o(.text._ZN5ScaleIfsE3setEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Scale&lang;float, short&rang;::set(float) &rArr; Scale&lang;float, short&rang;::update() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, short&rang;::update()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float limit&lang;float&rang;(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, short&rang;::operator=(float)
</UL>

<P><STRONG><a name="[100]"></a>Scale&lang;float, short&rang;::update()</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, test_task.o(.text._ZN5ScaleIfsE6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Scale&lang;float, short&rang;::update() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, short&rang;::set(float)
</UL>

<P><STRONG><a name="[120]"></a>Scale&lang;float, short&rang;::Scale__sub_object(float, float, short, short)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, main.o(.text._ZN5ScaleIfsEC2Effss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Scale&lang;float, short&rang;::Scale__sub_object(float, float, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
</UL>

<P><STRONG><a name="[be]"></a>Scale&lang;float, short&rang;::operator=(float)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, test_task.o(.text._ZN5ScaleIfsEaSEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Scale&lang;float, short&rang;::operator=(float) &rArr; Scale&lang;float, short&rang;::set(float) &rArr; Scale&lang;float, short&rang;::update() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, short&rang;::set(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTask(void*)
</UL>

<P><STRONG><a name="[103]"></a>Scale&lang;float, unsigned short&rang;::set(float)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, analog_out.o(.text._ZN5ScaleIftE3setEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Scale&lang;float, unsigned short&rang;::set(float) &rArr; Scale&lang;float, unsigned short&rang;::update() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, unsigned short&rang;::update()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float limit&lang;float&rang;(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOut::update1ms()
</UL>

<P><STRONG><a name="[104]"></a>Scale&lang;float, unsigned short&rang;::update()</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, analog_out.o(.text._ZN5ScaleIftE6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Scale&lang;float, unsigned short&rang;::update() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, unsigned short&rang;::set(float)
</UL>

<P><STRONG><a name="[116]"></a>Scale&lang;float, unsigned short&rang;::Scale__sub_object(float, float, unsigned short, unsigned short)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, analog_out.o(.text._ZN5ScaleIftEC2Efftt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Scale&lang;float, unsigned short&rang;::Scale__sub_object(float, float, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOut::AnalogOut(unsigned short, unsigned int, float, float, float, float)
</UL>

<P><STRONG><a name="[e3]"></a>Scale&lang;unsigned short, float&rang;::get()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, analog_monitor.o(.text._ZN5ScaleItfE3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Scale&lang;unsigned short, float&rang;::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogMonitor::set(unsigned short)
</UL>

<P><STRONG><a name="[105]"></a>Scale&lang;unsigned short, float&rang;::set(unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, analog_monitor.o(.text._ZN5ScaleItfE3setEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Scale&lang;unsigned short, float&rang;::set(unsigned short) &rArr; Scale&lang;unsigned short, float&rang;::update() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;unsigned short, float&rang;::update()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned short limit&lang;unsigned short&rang;(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;unsigned short, float&rang;::operator=(unsigned short)
</UL>

<P><STRONG><a name="[106]"></a>Scale&lang;unsigned short, float&rang;::update()</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, analog_monitor.o(.text._ZN5ScaleItfE6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Scale&lang;unsigned short, float&rang;::update() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;unsigned short, float&rang;::set(unsigned short)
</UL>

<P><STRONG><a name="[e7]"></a>Scale&lang;unsigned short, float&rang;::Scale__sub_object(unsigned short, unsigned short, float, float)</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, analog_monitor.o(.text._ZN5ScaleItfEC2Ettff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Scale&lang;unsigned short, float&rang;::Scale__sub_object(unsigned short, unsigned short, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogMonitor::AnalogMonitor(unsigned char, float, float)
</UL>

<P><STRONG><a name="[e2]"></a>Scale&lang;unsigned short, float&rang;::operator=(unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, analog_monitor.o(.text._ZN5ScaleItfEaSEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Scale&lang;unsigned short, float&rang;::operator=(unsigned short) &rArr; Scale&lang;unsigned short, float&rang;::set(unsigned short) &rArr; Scale&lang;unsigned short, float&rang;::update() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;unsigned short, float&rang;::set(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogMonitor::set(unsigned short)
</UL>

<P><STRONG><a name="[52]"></a>MovAvg::updateSomewhere()</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, moving_avg.o(.text._ZN6MovAvg15updateSomewhereEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MovAvg::updateSomewhere() &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moving_avg.o(.rodata._ZTV6MovAvg)
</UL>
<P><STRONG><a name="[bd]"></a>MovAvg::get()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, moving_avg.o(.text._ZN6MovAvg3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MovAvg::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTask(void*)
</UL>

<P><STRONG><a name="[10a]"></a>MovAvg::set(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, moving_avg.o(.text._ZN6MovAvg3setEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MovAvg::set(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovAvg::operator=(float)
</UL>

<P><STRONG><a name="[107]"></a>MovAvg::MovAvg(unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, moving_avg.o(.text._ZN6MovAvgC2Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = MovAvg::MovAvg(unsigned char) &rArr; operator new[](unsigned int) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IUpdatedSomewhere::IUpdatedSomewhere__sub_object()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw_bad_array_new_length
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char max&lang;unsigned char&rang;(unsigned char, unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.11
</UL>

<P><STRONG><a name="[1b3]"></a>MovAvg::MovAvg__sub_object(unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, moving_avg.o(.text._ZN6MovAvgC2Eh), UNUSED)

<P><STRONG><a name="[37]"></a>MovAvg::~MovAvg()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, moving_avg.o(.text._ZN6MovAvgD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MovAvg::~MovAvg() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.__cxx_global_var_init.11)
</UL>
<P><STRONG><a name="[1b4]"></a>MovAvg::~MovAvg__sub_object()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, moving_avg.o(.text._ZN6MovAvgD2Ev), UNUSED)

<P><STRONG><a name="[bc]"></a>MovAvg::operator=(float)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, moving_avg.o(.text._ZN6MovAvgaSEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MovAvg::operator=(float) &rArr; MovAvg::set(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovAvg::set(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTask(void*)
</UL>

<P><STRONG><a name="[10b]"></a>PIDreg::updateKoef()</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, pid.o(.text._ZN6PIDreg10updateKoefEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PIDreg::updateKoef() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::setTd(float)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::setTi(float)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::setKp(float)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::PIDreg(unsigned short, float, float, float, float, float, float, float, bool)
</UL>

<P><STRONG><a name="[53]"></a>PIDreg::updateSomewhere()</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, pid.o(.text._ZN6PIDreg15updateSomewhereEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = PIDreg::updateSomewhere() &rArr; float limit&lang;float&rang;(float, float, float) &rArr; void toggle&lang;float&rang;(float*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float abs&lang;float&rang;(float)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float limit&lang;float&rang;(float, float, float)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pid.o(.rodata._ZTV6PIDreg)
</UL>
<P><STRONG><a name="[b5]"></a>PIDreg::getT()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pid.o(.text._ZN6PIDreg4getTEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIDreg::getT() &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidTask(void*)
</UL>

<P><STRONG><a name="[10d]"></a>PIDreg::reset()</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, pid.o(.text._ZN6PIDreg5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PIDreg::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::PIDreg(unsigned short, float, float, float, float, float, float, float, bool)
</UL>

<P><STRONG><a name="[af]"></a>PIDreg::setKp(float)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pid.o(.text._ZN6PIDreg5setKpEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PIDreg::setKp(float) &rArr; PIDreg::updateKoef() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::updateKoef()
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidTask(void*)
</UL>

<P><STRONG><a name="[10e]"></a>PIDreg::setPv(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, pid.o(.text._ZN6PIDreg5setPvEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIDreg::setPv(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::operator=(float)
</UL>

<P><STRONG><a name="[b1]"></a>PIDreg::setTd(float)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pid.o(.text._ZN6PIDreg5setTdEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PIDreg::setTd(float) &rArr; PIDreg::updateKoef() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::updateKoef()
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidTask(void*)
</UL>

<P><STRONG><a name="[b0]"></a>PIDreg::setTi(float)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pid.o(.text._ZN6PIDreg5setTiEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PIDreg::setTi(float) &rArr; PIDreg::updateKoef() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::updateKoef()
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidTask(void*)
</UL>

<P><STRONG><a name="[b2]"></a>PIDreg::setAuto(bool)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pid.o(.text._ZN6PIDreg7setAutoEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIDreg::setAuto(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidTask(void*)
</UL>

<P><STRONG><a name="[121]"></a>PIDreg::getOutRef()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, pid.o(.text._ZN6PIDreg9getOutRefEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PIDreg::getOutRef()
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>PIDreg::PIDreg(unsigned short, float, float, float, float, float, float, float, bool)</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, pid.o(.text._ZN6PIDregC2Etfffffffb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PIDreg::PIDreg(unsigned short, float, float, float, float, float, float, float, bool) &rArr; PIDreg::updateKoef() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::reset()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::updateKoef()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IUpdatedSomewhere::IUpdatedSomewhere__sub_object()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
</UL>

<P><STRONG><a name="[1b5]"></a>PIDreg::PIDreg__sub_object(unsigned short, float, float, float, float, float, float, float, bool)</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, pid.o(.text._ZN6PIDregC2Etfffffffb), UNUSED)

<P><STRONG><a name="[b4]"></a>PIDreg::operator=(float)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, pid.o(.text._ZN6PIDregaSEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PIDreg::operator=(float) &rArr; PIDreg::setPv(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::setPv(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidTask(void*)
</UL>

<P><STRONG><a name="[d6]"></a>ISwitch::ISwitch__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, main.o(.text._ZN7ISwitchC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ISwitch::ISwitch__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInput::SimpleInput(GPIO_TypeDef*, unsigned char)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgrammCoil::ProgrammCoil__sub_object()
</UL>

<P><STRONG><a name="[10f]"></a>Monitor::setValueMax(float)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, monitor.o(.text._ZN7Monitor11setValueMaxEf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float max&lang;float&rang;(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::Monitor(float, float)
</UL>

<P><STRONG><a name="[110]"></a>Monitor::setTresDelay(TRES_TYPE, unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, monitor.o(.text._ZN7Monitor12setTresDelayE9TRES_TYPEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Monitor::setTresDelay(TRES_TYPE, unsigned short) &rArr; CommonTimer::setPeriod(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::setPeriod(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>Monitor::get()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, monitor.o(.text._ZN7Monitor3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Monitor::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTask(void*)
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidTask(void*)
</UL>

<P><STRONG><a name="[e4]"></a>Monitor::set(float)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, monitor.o(.text._ZN7Monitor3setEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Monitor::set(float) &rArr; float limit&lang;float&rang;(float, float, float) &rArr; void toggle&lang;float&rang;(float*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float limit&lang;float&rang;(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogMonitor::set(unsigned short)
</UL>

<P><STRONG><a name="[4b]"></a>Monitor::update1ms()</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, monitor.o(.text._ZN7Monitor9update1msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Monitor::update1ms() &rArr; CommonTimer::operator=(bool) &rArr; CommonTimer::setStart(bool) &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::operator=(bool)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float getRange&lang;float&rang;(float const*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> analog_monitor.o(.rodata._ZTV13AnalogMonitor)
<LI> monitor.o(.rodata._ZTV7Monitor)
</UL>
<P><STRONG><a name="[112]"></a>Monitor::Monitor(float, float)</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, monitor.o(.text._ZN7MonitorC2Eff), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IUpdated1ms::IUpdated1ms__sub_object()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::CommonTimer(unsigned short)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::setValueMax(float)
</UL>

<P><STRONG><a name="[e6]"></a>Monitor::Monitor__sub_object(float, float)</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, monitor.o(.text._ZN7MonitorC2Eff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Monitor::Monitor__sub_object(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogMonitor::AnalogMonitor(unsigned char, float, float)
</UL>

<P><STRONG><a name="[113]"></a>Monitor::~Monitor()</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, monitor.o(.text._ZN7MonitorD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>

<P><STRONG><a name="[e8]"></a>Monitor::~Monitor__sub_object()</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, monitor.o(.text._ZN7MonitorD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Monitor::~Monitor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogMonitor::~AnalogMonitor()
</UL>

<P><STRONG><a name="[54]"></a>AnalogOut::update1ms()</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, analog_out.o(.text._ZN9AnalogOut9update1msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AnalogOut::update1ms() &rArr; Scale&lang;float, unsigned short&rang;::set(float) &rArr; Scale&lang;float, unsigned short&rang;::update() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, unsigned short&rang;::set(float)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::get()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::update1ms()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> analog_out.o(.rodata._ZTV9AnalogOut)
</UL>
<P><STRONG><a name="[115]"></a>AnalogOut::AnalogOut(unsigned short, unsigned int, float, float, float, float)</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, analog_out.o(.text._ZN9AnalogOutC2Etjffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AnalogOut::AnalogOut(unsigned short, unsigned int, float, float, float, float) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, unsigned short&rang;::Scale__sub_object(float, float, unsigned short, unsigned short)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::Ramp__sub_object(unsigned int, float, float, float, float)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
</UL>

<P><STRONG><a name="[1b6]"></a>AnalogOut::AnalogOut__sub_object(unsigned short, unsigned int, float, float, float, float)</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, analog_out.o(.text._ZN9AnalogOutC2Etjffff), UNUSED)

<P><STRONG><a name="[3c]"></a>AnalogOut::~AnalogOut()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, analog_out.o(.text._ZN9AnalogOutD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AnalogOut::~AnalogOut() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.__cxx_global_var_init.7)
</UL>
<P><STRONG><a name="[1b7]"></a>AnalogOut::~AnalogOut__sub_object()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, analog_out.o(.text._ZN9AnalogOutD2Ev), UNUSED)

<P><STRONG><a name="[c2]"></a>AnalogOut::operator=(float)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, analog_out.o(.text._ZN9AnalogOutaSEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AnalogOut::operator=(float) &rArr; Ramp::set(float) &rArr; float limit&lang;float&rang;(float, float, float) &rArr; void toggle&lang;float&rang;(float*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::set(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTask(void*)
</UL>

<P><STRONG><a name="[55]"></a>TwoPosTim::update1ms()</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, two_pos.o(.text._ZN9TwoPosTim9update1msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TwoPosTim::update1ms() &rArr; CommonTimer::setStart(bool) &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::finished()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::setStart(bool)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> two_pos.o(.rodata._ZTV9TwoPosTim)
</UL>
<P><STRONG><a name="[118]"></a>TwoPosTim::TwoPosTim(float, unsigned short, unsigned short, bool)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, two_pos.o(.text._ZN9TwoPosTimC2Efttb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TwoPosTim::TwoPosTim(float, unsigned short, unsigned short, bool) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IUpdated1ms::IUpdated1ms__sub_object()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::CommonTimer(unsigned short)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoPosCommon::TwoPosCommon__sub_object(float, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.12
</UL>

<P><STRONG><a name="[1b8]"></a>TwoPosTim::TwoPosTim__sub_object(float, unsigned short, unsigned short, bool)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, two_pos.o(.text._ZN9TwoPosTimC2Efttb), UNUSED)

<P><STRONG><a name="[38]"></a>TwoPosTim::~TwoPosTim()</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, two_pos.o(.text._ZN9TwoPosTimD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TwoPosTim::~TwoPosTim() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.__cxx_global_var_init.12)
</UL>
<P><STRONG><a name="[1b9]"></a>TwoPosTim::~TwoPosTim__sub_object()</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, two_pos.o(.text._ZN9TwoPosTimD2Ev), UNUSED)

<P><STRONG><a name="[c3]"></a>TwoPosTim::operator=(float)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, two_pos.o(.text._ZN9TwoPosTimaSEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TwoPosTim::operator=(float) &rArr; TwoPosCommon::set(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoPosCommon::set(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTask(void*)
</UL>

<P><STRONG><a name="[11b]"></a>std::__terminate(void (*)())</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt11__terminatePFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = std::__terminate(void (*)()) &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[11f]"></a>std::get_new_handler()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt15get_new_handlerv))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>

<P><STRONG><a name="[11d]"></a>std::terminate()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt9terminatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; std::__terminate(void (*)()) &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void (*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw_bad_array_new_length
</UL>

<P><STRONG><a name="[4e]"></a>non-virtual thunk to SimpleInputDelayed::update1ms()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, simple_input.o(.text._ZThn12_N18SimpleInputDelayed9update1msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = non-virtual thunk to SimpleInputDelayed::update1ms() &rArr; SimpleInputDelayed::update1ms() &rArr; CommonTimer::setStart(bool) &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::update1ms()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simple_input.o(.rodata._ZTV18SimpleInputDelayed)
</UL>
<P><STRONG><a name="[11e]"></a>operator delete(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>

<P><STRONG><a name="[df]"></a>operator delete(void*, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdlPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mux&lang;float&rang;::~Mux__sub_object()
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::~ThreePosReg()
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoPosTim::~TwoPosTim()
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovAvg::~MovAvg()
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOut::~AnalogOut()
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogMonitor::~AnalogMonitor()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::~Monitor()
</UL>

<P><STRONG><a name="[f2]"></a>operator new[](unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new[](unsigned int) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mux&lang;float&rang;::Mux__sub_object(unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovAvg::MovAvg(unsigned char)
</UL>

<P><STRONG><a name="[de]"></a>operator new(unsigned int)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, new.cpp.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::ThreePosReg(float, float, float, unsigned short, unsigned short, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoPosTim::TwoPosTim(float, unsigned short, unsigned short, bool)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOut::AnalogOut(unsigned short, unsigned int, float, float, float, float)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogMonitor::AnalogMonitor(unsigned char, float, float)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::Monitor(float, float)
</UL>

<P><STRONG><a name="[45]"></a>__cxa_pure_virtual</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 3]<UL><LI> main.o(.rodata._ZTV7ISwitch)
<LI> common_timer.o(.rodata._ZTV11IUpdated1ms)
<LI> pid.o(.rodata._ZTV17IUpdatedSomewhere)
</UL>
<P><STRONG><a name="[f1]"></a>__cxa_throw_bad_array_new_length</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cxa_aux_runtime.cpp.o(.text.__cxa_throw_bad_array_new_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_throw_bad_array_new_length &rArr; std::terminate() &rArr; std::__terminate(void (*)()) &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mux&lang;float&rang;::Mux__sub_object(unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovAvg::MovAvg(unsigned char)
</UL>

<P><STRONG><a name="[11c]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void (*)())
</UL>

<P><STRONG><a name="[68]"></a>main</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgrammCoil::operator=(bool)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmInit()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickInit()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rccInit()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::setTresDelay(TRES_TYPE, unsigned short)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mux&lang;float&rang;::get()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mux&lang;float&rang;::set(unsigned char)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mux&lang;float&rang;::reg(float*, unsigned char)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mux&lang;float&rang;::reg(int, ...)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::getOutRef()
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[14d]"></a>pvPortMalloc</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[13b]"></a>pxPortInitialiseStack</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[128]"></a>uxListRemove</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, list.o(.text.uxListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[136]"></a>vApplicationIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.vApplicationIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[154]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[15b]"></a>vApplicationTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.vApplicationTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[12f]"></a>vListInitialise</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, list.o(.text.vListInitialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[13a]"></a>vListInitialiseItem</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[129]"></a>vListInsert</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[12b]"></a>vPortEnterCritical</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[12d]"></a>vPortExitCritical</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[135]"></a>vPortFree</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[155]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[146]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[ae]"></a>vTaskDelay</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTask(void*)
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidTask(void*)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask(void*)
</UL>

<P><STRONG><a name="[157]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[14c]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[151]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[150]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[126]"></a>vTaskStartScheduler</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[144]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[58]"></a>vTaskSwitchContext</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[153]"></a>xPortStartScheduler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[130]"></a>xQueueGenericCreate</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, queue.o(.text.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[138]"></a>xQueueGenericReset</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[141]"></a>xQueueReceive</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[158]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xTaskCheckForTimeOut &rArr; vTaskInternalSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[125]"></a>xTaskCreate</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[147]"></a>xTaskGetTickCount</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[89]"></a>xTaskIncrementTick</STRONG> (Thumb, 596 bytes, Stack size 40 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[14b]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 368 bytes, Stack size 28 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[145]"></a>xTaskResumeAll</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[152]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::updateSomewhere()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::updateKoef()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, unsigned short&rang;::update()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::update1ms()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;unsigned short, float&rang;::update()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, short&rang;::update()
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovAvg::updateSomewhere()
</UL>

<P><STRONG><a name="[15c]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_fcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::updateKoef()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::update1ms()
</UL>

<P><STRONG><a name="[160]"></a>_feq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[162]"></a>_fneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_fcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoPosTim::update1ms()
</UL>

<P><STRONG><a name="[163]"></a>_fgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_fcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::updateSomewhere()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float abs&lang;float&rang;(float)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::update1ms()
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::update1ms()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float limit&lang;float&rang;(float, float, float)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::update1ms()
</UL>

<P><STRONG><a name="[165]"></a>_fgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_fcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float max&lang;float&rang;(float, float)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::update1ms()
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::update1ms()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float limit&lang;float&rang;(float, float, float)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::update1ms()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::Ramp(unsigned int, float, float, float, float)
</UL>

<P><STRONG><a name="[166]"></a>_fleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_fcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoPosTim::update1ms()
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::update1ms()
</UL>

<P><STRONG><a name="[168]"></a>_fls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[16a]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::updateKoef()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, unsigned short&rang;::update()
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::update1ms()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;unsigned short, float&rang;::update()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, short&rang;::update()
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovAvg::updateSomewhere()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::setFullRangeTime(unsigned int)
</UL>

<P><STRONG><a name="[169]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1ba]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)

<P><STRONG><a name="[161]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fneq
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_feq
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, unsigned short&rang;::update()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::getT()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, short&rang;::update()
</UL>

<P><STRONG><a name="[16b]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, unsigned short&rang;::update()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;unsigned short, float&rang;::update()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, short&rang;::update()
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTask(void*)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovAvg::updateSomewhere()
</UL>

<P><STRONG><a name="[1bb]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[f6]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::PIDreg(unsigned short, float, float, float, float, float, float, float, bool)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::setFullRangeTime(unsigned int)
</UL>

<P><STRONG><a name="[1bc]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[164]"></a>_fcmpge</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fgeqf.o(x$fpl$fgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgeq
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgr
</UL>

<P><STRONG><a name="[1bd]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[167]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fls
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fleq
</UL>

<P><STRONG><a name="[1be]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[101]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::updateSomewhere()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::updateKoef()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, unsigned short&rang;::update()
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor::update1ms()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;unsigned short, float&rang;::update()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, short&rang;::update()
</UL>

<P><STRONG><a name="[16c]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[15f]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[15e]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::updateSomewhere()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::updateKoef()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, unsigned short&rang;::update()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::update1ms()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;unsigned short, float&rang;::update()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, short&rang;::update()
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::update1ms()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float getRange&lang;float&rang;(float const*)
</UL>

<P><STRONG><a name="[16d]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8a]"></a>__cxx_global_var_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __cxx_global_var_init &rArr; Coil::Coil(GPIO_TypeDef*, unsigned char) &rArr; void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[8b]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.1 &rArr; SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short) &rArr; SimpleInput::SimpleInput__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[8c]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __cxx_global_var_init.2 &rArr; ProgrammCoil::ProgrammCoil__sub_object() &rArr; ISwitch::ISwitch__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgrammCoil::ProgrammCoil__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[8d]"></a>__cxx_global_var_init.3</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.3))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __cxx_global_var_init.3 &rArr; SwitchDelay::SwitchDelay(ISwitch*, unsigned short) &rArr; CommonTimer::CommonTimer__sub_object(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchDelay::SwitchDelay(ISwitch*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[8e]"></a>__cxx_global_var_init.4</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.4))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __cxx_global_var_init.4 &rArr; SwitchDelay::SwitchDelay(ISwitch*, unsigned short) &rArr; CommonTimer::CommonTimer__sub_object(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchDelay::SwitchDelay(ISwitch*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[8f]"></a>__cxx_global_var_init.5</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.5))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __cxx_global_var_init.5 &rArr; CommonTimer::CommonTimer(unsigned short) &rArr; IUpdated1ms::IUpdated1ms__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::CommonTimer(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[90]"></a>__cxx_global_var_init.6</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(.text.__cxx_global_var_init.6))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __cxx_global_var_init.6 &rArr; AnalogMonitor::AnalogMonitor(unsigned char, float, float) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogMonitor::AnalogMonitor(unsigned char, float, float)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[91]"></a>__cxx_global_var_init.7</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, main.o(.text.__cxx_global_var_init.7))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __cxx_global_var_init.7 &rArr; AnalogOut::AnalogOut(unsigned short, unsigned int, float, float, float, float) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOut::AnalogOut(unsigned short, unsigned int, float, float, float, float)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[92]"></a>__cxx_global_var_init.8</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, main.o(.text.__cxx_global_var_init.8))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __cxx_global_var_init.8 &rArr; PIDreg::PIDreg(unsigned short, float, float, float, float, float, float, float, bool) &rArr; PIDreg::updateKoef() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDreg::PIDreg(unsigned short, float, float, float, float, float, float, float, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[93]"></a>__cxx_global_var_init.9</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text.__cxx_global_var_init.9))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init.9 &rArr; Scale&lang;float, short&rang;::Scale__sub_object(float, float, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scale&lang;float, short&rang;::Scale__sub_object(float, float, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[94]"></a>__cxx_global_var_init.10</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.10))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxx_global_var_init.10 &rArr; Ramp::Ramp(unsigned int) &rArr; Ramp::Ramp__sub_object(unsigned int, float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp::Ramp(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[95]"></a>__cxx_global_var_init.11</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(.text.__cxx_global_var_init.11))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.11 &rArr; MovAvg::MovAvg(unsigned char) &rArr; operator new[](unsigned int) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovAvg::MovAvg(unsigned char)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[96]"></a>__cxx_global_var_init.12</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, main.o(.text.__cxx_global_var_init.12))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __cxx_global_var_init.12 &rArr; TwoPosTim::TwoPosTim(float, unsigned short, unsigned short, bool) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoPosTim::TwoPosTim(float, unsigned short, unsigned short, bool)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[97]"></a>__cxx_global_var_init.13</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, main.o(.text.__cxx_global_var_init.13))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __cxx_global_var_init.13 &rArr; ThreePosReg::ThreePosReg(float, float, float, unsigned short, unsigned short, bool) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreePosReg::ThreePosReg(float, float, float, unsigned short, unsigned short, bool)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[98]"></a>__cxx_global_var_init.14</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(.text.__cxx_global_var_init.14))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.14 &rArr; Mux&lang;float&rang;::Mux__sub_object(unsigned char) &rArr; operator new[](unsigned int) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mux&lang;float&rang;::Mux__sub_object(unsigned char)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[56]"></a>_GLOBAL__sub_I_main.cpp</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(.text._GLOBAL__sub_I_main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_main.cpp &rArr; __cxx_global_var_init.13 &rArr; ThreePosReg::ThreePosReg(float, float, float, unsigned short, unsigned short, bool) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.14
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.13
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.12
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.11
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.10
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[14e]"></a>prvHeapInit</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, heap_4.o(.text.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[14f]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 198 bytes, Stack size 12 bytes, heap_4.o(.text.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[137]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, queue.o(.text.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[14a]"></a>prvUnlockQueue</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[13d]"></a>prvIsQueueEmpty</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, queue.o(.text.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[133]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, queue.o(.text.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[139]"></a>prvInitialiseNewTask</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[12a]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[12c]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tasks.o(.text.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[15a]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tasks.o(.text.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[132]"></a>prvDeleteTCB</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tasks.o(.text.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[127]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[41]"></a>prvIdleTask</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[131]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(.text.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[12e]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, timers.o(.text.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[42]"></a>prvTimerTask</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[149]"></a>prvGetNextExpireTime</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timers.o(.text.prvGetNextExpireTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvGetNextExpireTime
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[143]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, timers.o(.text.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[140]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, timers.o(.text.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[142]"></a>prvSampleTimeNow</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, timers.o(.text.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[13e]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, timers.o(.text.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[13c]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, timers.o(.text.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[13f]"></a>prvReloadTimer</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, timers.o(.text.prvReloadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[148]"></a>prvSwitchTimerLists</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, timers.o(.text.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[40]"></a>prvTaskExitError</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[156]"></a>prvPortStartFirstTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[9a]"></a>__NVIC_SetPriorityGrouping(unsigned int)</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, init.o(.text._ZL26__NVIC_SetPriorityGroupingj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
</UL>

<P><STRONG><a name="[c5]"></a>__NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, init.o(.text._ZL16__NVIC_EnableIRQ4IRQn))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickInit()
</UL>

<P><STRONG><a name="[c6]"></a>__NVIC_SetPriority(IRQn, unsigned int)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, init.o(.text._ZL18__NVIC_SetPriority4IRQnj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority(IRQn, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickInit()
</UL>

<P><STRONG><a name="[87]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[88]"></a>SetSysClockTo72</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, system_stm32f10x.o(.text.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[16e]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[15d]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
